{"0": {
    "doc": "Sample Introduction",
    "title": "Introduction &amp; Setup",
    "content": "by CrimsonMods aka SkyTech6 . Hey! This is a short introduction to modding V Rising. We will be exploring a dice rolling sample mod project, examining the components of how it works, and then we will be expanding the functionality of the mod! . If you want to see what a potential end result of the tutorial would look like check out CrimsonDice that I created alongside this tutorial. ",
    "url": "/dev/tutorials/SampleTutorial/00_sample_introduction.html#introduction--setup",
    
    "relUrl": "/dev/tutorials/SampleTutorial/00_sample_introduction.html#introduction--setup"
  },"1": {
    "doc": "Sample Introduction",
    "title": "Sample Introduction",
    "content": " ",
    "url": "/dev/tutorials/SampleTutorial/00_sample_introduction.html",
    
    "relUrl": "/dev/tutorials/SampleTutorial/00_sample_introduction.html"
  },"2": {
    "doc": "Part 1 - Setup",
    "title": "Part 1: Setup",
    "content": " ",
    "url": "/dev/tutorials/SampleTutorial/01_sample_setup.html#part-1-setup",
    
    "relUrl": "/dev/tutorials/SampleTutorial/01_sample_setup.html#part-1-setup"
  },"3": {
    "doc": "Part 1 - Setup",
    "title": "Visual Studio",
    "content": "I highly recommend Visual Studio 2022. It’s a free IDE and has built-in nuget package manager. This is where you’ll build the actual mod’s code and compile test builds. Then you want to select “Game development with Unity” from the installer. I also recommend watching a few Visual Studio videos to jump-start knowing how to get around the software. IDE Notes . I personally use both Visual Studio 2022 and Visual Studio Code while working on V Rising mods. Visual Studio is a full IDE and includes the tools needed to compile DLLs. To my knowledge, Visual Studio Code cannot compile DLLs as it is a glorified text editor; but Code is a much more ingrained piece of software in my workflow due to being a Unity developer. I know some other modders like to use Rider because it includes dnSpy. My recommendation is to start with Visual Studio 2022 and venture out to other options once you’re comfortable. ",
    "url": "/dev/tutorials/SampleTutorial/01_sample_setup.html#visual-studio",
    
    "relUrl": "/dev/tutorials/SampleTutorial/01_sample_setup.html#visual-studio"
  },"4": {
    "doc": "Part 1 - Setup",
    "title": "Git",
    "content": "Next you’ll want to setup Git on your computer. The more classical approach would be to install Git directly and can follow the installer with default settings. Nowadays though people tend to prefer GUIs and getting GitHub Desktop will both give you a GUI and install Git. Learn more about Version Control here. And if you wanna use version control in a professional manner, really utilize the power of Git, learn about GitFlow. ",
    "url": "/dev/tutorials/SampleTutorial/01_sample_setup.html#git",
    
    "relUrl": "/dev/tutorials/SampleTutorial/01_sample_setup.html#git"
  },"5": {
    "doc": "Part 1 - Setup",
    "title": "Template",
    "content": "For this tutorial we’ll be using VRising.ModTemplatePlus from nuget. Open a Command Prompt or PowerShell window in a folder you want to make your mods and use the following command to install the template. dotnet new install VRising.ModTemplatePlus . That will install the template which you can use for this tutorial and for any future mod projects as well. Next we’ll create the sample project by passing in the -how parameter to the template. dotnet new vrisingmodplus -n DiceRoller -how -desc \"Sample Project\" . This will create a new project from the vrisingmodplus template with the name Dice Roller, the description Sample Project, and the how parameter will include some tutorial specific notes in the project. Once you finish this tutorial you should no longer need to include the how parameter. You can learn more about what the template can do at text. ",
    "url": "/dev/tutorials/SampleTutorial/01_sample_setup.html#template",
    
    "relUrl": "/dev/tutorials/SampleTutorial/01_sample_setup.html#template"
  },"6": {
    "doc": "Part 1 - Setup",
    "title": "Open the .sln in Visual Studio",
    "content": "You should now see a file titled DiceRoller.sln. Right click that and select Open with… Visual Studio 2022. That will load up the IDE with the DiceRoller project. Make your way over to the Plugin.cs file and we’ll begin the next Part fo the tutorial there. Next Part 2: What is Plugin? . ",
    "url": "/dev/tutorials/SampleTutorial/01_sample_setup.html#open-the-sln-in-visual-studio",
    
    "relUrl": "/dev/tutorials/SampleTutorial/01_sample_setup.html#open-the-sln-in-visual-studio"
  },"7": {
    "doc": "Part 1 - Setup",
    "title": "Part 1 - Setup",
    "content": " ",
    "url": "/dev/tutorials/SampleTutorial/01_sample_setup.html",
    
    "relUrl": "/dev/tutorials/SampleTutorial/01_sample_setup.html"
  },"8": {
    "doc": "Part 2 - What is Plugin?",
    "title": "Part 2: What is Plugin?",
    "content": "In this part we will explore the project generated by the Template and try to understand the general structure and components of a V Rising mod. You should have a matching Solution Explorer as the below image. We will go over each folder and file, but we’ll go in order that I typically would build them without a template. ",
    "url": "/dev/tutorials/SampleTutorial/02_sample_plugin.html#part-2-what-is-plugin",
    
    "relUrl": "/dev/tutorials/SampleTutorial/02_sample_plugin.html#part-2-what-is-plugin"
  },"9": {
    "doc": "Part 2 - What is Plugin?",
    "title": "Attributes &amp; Variables",
    "content": "Plugin is the absolute center of your mod. It is the script that BepInEx uses to load the mod into the game. From top to bottom I’ll explain what each part of the script does. [BepInPlugin(MyPluginInfo.PLUGIN_GUID, MyPluginInfo.PLUGIN_NAME, MyPluginInfo.PLUGIN_VERSION)] [BepInDependency(\"gg.deca.VampireCommandFramework\")] public class Plugin : BasePlugin . I won’t be going into detail on what a Class, Struct, interface, or other types in C# are. You can pick up on that over time as you mod or can checkout some C# tutorials to learn more. The top two elements here BepInPlugin and BepInDependency are Attributes that define how the BepInEx loader should define and handle our mod. Plugin GUID is the assembly name of our mod, you could change this if you wanted to be different than the assembly; but currently it is DiceRoller. As such Plugin Name will also be DiceRoller. There isn’t much reason to have these difference unless you’re building a framework and want to have library-like addresses for your guid (i.e. VampireCommandFramework). Plugin Version defines the current Semantic Version of your mod. 1.0.0 for example is the default. As you update your mod this version will increase and inform user (and Thunderstore) to update. The second Attribute shown is BepInDependency. This tells BepInEx that your mod must be loaded after VampireCommandFramework in-order to function. You can also tell BepInEx that you want to load after specific mods but don’t necessarily need them to be present with DependencyFlag.SoftDependency. But that’s a tad more advanced of a topic. Harmony _harmony; public static Plugin Instance { get; private set; } public static Harmony Harmony =&gt; Instance._harmony; public static ManualLogSource LogInstance =&gt; Instance.Log; public static Settings Settings { get; private set; } . Harmony is a patching library for .NET at runtime. This is what enables us to modify and augment the game’s code to do different things. BepInEx is using a forked flavor of Harmony called HarmonyX. Plugin Instance is simply giving us a Static reference to our Plugin class that we can call anywhere in the application. You can see that both Harmony and LogInstance are being set to instances inside the Plugin static “Instance”. ManualLogSource is the name of BepInEx’s logging system. This will output information to the LogOutpout.log file at runtime. For example: . [Info :CrimsonBanned] |CrimsonBanned[1.2.0] initialized| [Info :CrimsonClans] InitializeAfterLoaded completed [Info :CrimsonStyle] Loaded Styles Database: 3 entries . This is useful for all kinds of reason such as debugging, ensuring the mod is loading, and just general audit information. And lastly there is Settings, we will return to this in a future part soon, but for now just know that it is the container &amp; generator for the BepInEx Config for the mod. ",
    "url": "/dev/tutorials/SampleTutorial/02_sample_plugin.html#attributes--variables",
    
    "relUrl": "/dev/tutorials/SampleTutorial/02_sample_plugin.html#attributes--variables"
  },"10": {
    "doc": "Part 2 - What is Plugin?",
    "title": "What is Load()",
    "content": "So imagine BepInEx is going through each mod one-by-one. It needs instruction on what to do when it reaches your mod. Load is that instruction, it is all the elements required to get your mod initially loaded. Now there are instances where you don’t want to initialize everything about your mod at this point; as the server does not exist yet fully. We’ll get into that more with Core.cs. public override void Load() { Instance = this; Settings = new Settings(); Settings.InitConfig(); Log.LogInfo($\"Plugin {MyPluginInfo.PLUGIN_GUID} version {MyPluginInfo.PLUGIN_VERSION} is loaded!\"); // Harmony patching _harmony = new Harmony(MyPluginInfo.PLUGIN_GUID); _harmony.PatchAll(System.Reflection.Assembly.GetExecutingAssembly()); // Register all commands in the assembly with VCF CommandRegistry.RegisterAll(); } . Learn about void here. Learn about override here. Code is executed top to bottom, so here we can see the first thing we do is set our Instance variable from above to this instance of Plugin. Then we create a new instance of our Settings script and call the InitConfig method from it. Again we’ll go into detail about what this is doing later. We then call our ManualLogSource and output to the log that our mod was loaded. Then we are setting up Harmony for our mod by passing in an identifier (our GUID) and telling it to patch all of the assemblies in our project (everything in the Patches folder in this instance). You can also specify specific things to Patch and Unpatch as well, but again that’s a tad more advanced of a topic that we won’t be going into deeply in this tutorial. Lastly you’ll see the CommandRegistry.RegisterAll method call. This is to the VampireCommandFramework telling it to load all the commands in the project (everything in the Commands folder in this instance). ",
    "url": "/dev/tutorials/SampleTutorial/02_sample_plugin.html#what-is-load",
    
    "relUrl": "/dev/tutorials/SampleTutorial/02_sample_plugin.html#what-is-load"
  },"11": {
    "doc": "Part 2 - What is Plugin?",
    "title": "What is Unload()",
    "content": "Like Load, we also need to tell BepInEx what to do when we Unload the mod (the server shuts down or the game closes). public override bool Unload() { CommandRegistry.UnregisterAssembly(); _harmony?.UnpatchSelf(); return true; } . This is rather straightforward. We unregister our commands from VCF (VampireCommandFramework) and unpatch from Harmony. Then we return true to tell BepInEx that we’ve succeeded in unloading. Next Part 2: What are ECSExtensions? . ",
    "url": "/dev/tutorials/SampleTutorial/02_sample_plugin.html#what-is-unload",
    
    "relUrl": "/dev/tutorials/SampleTutorial/02_sample_plugin.html#what-is-unload"
  },"12": {
    "doc": "Part 2 - What is Plugin?",
    "title": "Part 2 - What is Plugin?",
    "content": " ",
    "url": "/dev/tutorials/SampleTutorial/02_sample_plugin.html",
    
    "relUrl": "/dev/tutorials/SampleTutorial/02_sample_plugin.html"
  },"13": {
    "doc": "Part 3 - What is ECSExtensions?",
    "title": "What is ECSExtensions?",
    "content": "This is a large reason for this Template. Every V Rising mod will contain a file called ECSExtensions or Extensions. These are extension methods that apply almost exclusively to the Entity type from Unity. The reason for this script is that reading, creating, and modifying Entity types is not as straight-forward as if V Rising was created with GameObjects (the traditional method of making games in Unity). Instead the game is made with the Entity Component System (or ECS). Notice I don’t include links here. Don’t worry about what ECS is for now. Just know that every object in V Rising derives from Entity and these allow you to access them. This version of the file in the template contains XML Summaries. These are blocks of documentation that generate tooltips when you use them in Visual Studio. We’ll go over a few of the most commonly used one though. public unsafe static void Write&lt;T&gt;(this Entity entity, T componentData) where T : struct . Write is used for modifying the data on an Entity. Say you want to change the Health of an Entity? You would get reference to the Health data, change the values, and then entity.Write(healthData) to update it with your changes. public unsafe static T Read&lt;T&gt;(this Entity entity) where T : struct . Read is what allows you to read the data from an Entity. From the above example if you wanted to know the Health values you would need to use entity.Read&lt;Health&gt;() first. public static bool Has&lt;T&gt;(this Entity entity) . You may wonder what would happen if you try to Read data that doesn’t exist on the Entity? Well it will cause an exception. First you need to check that it exists with Has like entity.Has&lt;Health&gt;(). public static void Add&lt;T&gt;(this Entity entity); public static void Remove&lt;T&gt;(this Entity entity); . These two are pretty self-explanatory. You can also add entirely new data to an Entity or remove it completely. ",
    "url": "/dev/tutorials/SampleTutorial/03_sample_ecs.html#what-is-ecsextensions",
    
    "relUrl": "/dev/tutorials/SampleTutorial/03_sample_ecs.html#what-is-ecsextensions"
  },"14": {
    "doc": "Part 3 - What is ECSExtensions?",
    "title": "Are all (ECS)Extensions.cs created Equal?",
    "content": "Absolutely not. Although there is a lot of overlap in what this file will contain between modders, there are sometimes differences both in functions and even intention. For instance the one in this template also contains a development utility method called Dump . public static void Dump(this Entity entity, string filePath) . Calling entity.Dump(\"WhatInHere.txt\") on an Entity would create a file that lists all the available data on that entity. I use this method extensively while developing mods; so I include it in my Extensions.cs file. ",
    "url": "/dev/tutorials/SampleTutorial/03_sample_ecs.html#are-all-ecsextensionscs-created-equal",
    
    "relUrl": "/dev/tutorials/SampleTutorial/03_sample_ecs.html#are-all-ecsextensionscs-created-equal"
  },"15": {
    "doc": "Part 3 - What is ECSExtensions?",
    "title": "Is this file the best place for these functions?",
    "content": "Maybe. That’s a very opinionated topic. In the VAMP framework this pattern is broken in favor of having EntityUtil, DevUtil, and other utility scripts. Next Part 4: What are Configs? . ",
    "url": "/dev/tutorials/SampleTutorial/03_sample_ecs.html#is-this-file-the-best-place-for-these-functions",
    
    "relUrl": "/dev/tutorials/SampleTutorial/03_sample_ecs.html#is-this-file-the-best-place-for-these-functions"
  },"16": {
    "doc": "Part 3 - What is ECSExtensions?",
    "title": "Part 3 - What is ECSExtensions?",
    "content": " ",
    "url": "/dev/tutorials/SampleTutorial/03_sample_ecs.html",
    
    "relUrl": "/dev/tutorials/SampleTutorial/03_sample_ecs.html"
  },"17": {
    "doc": "Part 4 - What are Configs?",
    "title": "What are Configs?",
    "content": " ",
    "url": "/dev/tutorials/SampleTutorial/04_sample_config.html#what-are-configs",
    
    "relUrl": "/dev/tutorials/SampleTutorial/04_sample_config.html#what-are-configs"
  },"18": {
    "doc": "Part 4 - What are Configs?",
    "title": "Part 4 - What are Configs?",
    "content": " ",
    "url": "/dev/tutorials/SampleTutorial/04_sample_config.html",
    
    "relUrl": "/dev/tutorials/SampleTutorial/04_sample_config.html"
  },"19": {
    "doc": "AB",
    "title": "AB",
    "content": " ",
    "url": "/prefabs/AB.html",
    
    "relUrl": "/prefabs/AB.html"
  },"20": {
    "doc": "AI",
    "title": "AI",
    "content": " ",
    "url": "/prefabs/AI.html",
    
    "relUrl": "/prefabs/AI.html"
  },"21": {
    "doc": "Ability",
    "title": "Ability",
    "content": " ",
    "url": "/prefabs/Ability.html",
    
    "relUrl": "/prefabs/Ability.html"
  },"22": {
    "doc": "Aim",
    "title": "Aim",
    "content": " ",
    "url": "/prefabs/Aim.html",
    
    "relUrl": "/prefabs/Aim.html"
  },"23": {
    "doc": "All",
    "title": "All",
    "content": " ",
    "url": "/prefabs/All.html",
    
    "relUrl": "/prefabs/All.html"
  },"24": {
    "doc": "BEH",
    "title": "BEH",
    "content": " ",
    "url": "/prefabs/BEH.html",
    
    "relUrl": "/prefabs/BEH.html"
  },"25": {
    "doc": "BP",
    "title": "BP",
    "content": " ",
    "url": "/prefabs/BP.html",
    
    "relUrl": "/prefabs/BP.html"
  },"26": {
    "doc": "Base",
    "title": "Base",
    "content": " ",
    "url": "/prefabs/Base.html",
    
    "relUrl": "/prefabs/Base.html"
  },"27": {
    "doc": "Biome",
    "title": "Biome",
    "content": " ",
    "url": "/prefabs/Biome.html",
    
    "relUrl": "/prefabs/Biome.html"
  },"28": {
    "doc": "Blood",
    "title": "Blood",
    "content": " ",
    "url": "/prefabs/Blood.html",
    
    "relUrl": "/prefabs/Blood.html"
  },"29": {
    "doc": "Braziers",
    "title": "Braziers",
    "content": " ",
    "url": "/prefabs/Braziers.html",
    
    "relUrl": "/prefabs/Braziers.html"
  },"30": {
    "doc": "Buff",
    "title": "Buff",
    "content": " ",
    "url": "/prefabs/Buff.html",
    
    "relUrl": "/prefabs/Buff.html"
  },"31": {
    "doc": "CHAR",
    "title": "CHAR",
    "content": " ",
    "url": "/prefabs/CHAR.html",
    
    "relUrl": "/prefabs/CHAR.html"
  },"32": {
    "doc": "CO",
    "title": "CO",
    "content": " ",
    "url": "/prefabs/CO.html",
    
    "relUrl": "/prefabs/CO.html"
  },"33": {
    "doc": "Castle",
    "title": "Castle",
    "content": " ",
    "url": "/prefabs/Castle.html",
    
    "relUrl": "/prefabs/Castle.html"
  },"34": {
    "doc": "Chain",
    "title": "Chain",
    "content": " ",
    "url": "/prefabs/Chain.html",
    
    "relUrl": "/prefabs/Chain.html"
  },"35": {
    "doc": "Copper",
    "title": "Copper",
    "content": " ",
    "url": "/prefabs/Copper.html",
    
    "relUrl": "/prefabs/Copper.html"
  },"36": {
    "doc": "Creature",
    "title": "Creature",
    "content": " ",
    "url": "/prefabs/Creature.html",
    
    "relUrl": "/prefabs/Creature.html"
  },"37": {
    "doc": "Critter",
    "title": "Critter",
    "content": " ",
    "url": "/prefabs/Critter.html",
    
    "relUrl": "/prefabs/Critter.html"
  },"38": {
    "doc": "Cursed",
    "title": "Cursed",
    "content": " ",
    "url": "/prefabs/Cursed.html",
    
    "relUrl": "/prefabs/Cursed.html"
  },"39": {
    "doc": "Curtains",
    "title": "Curtains",
    "content": " ",
    "url": "/prefabs/Curtains.html",
    
    "relUrl": "/prefabs/Curtains.html"
  },"40": {
    "doc": "Curve",
    "title": "Curve",
    "content": " ",
    "url": "/prefabs/Curve.html",
    
    "relUrl": "/prefabs/Curve.html"
  },"41": {
    "doc": "DG",
    "title": "DG",
    "content": " ",
    "url": "/prefabs/DG.html",
    
    "relUrl": "/prefabs/DG.html"
  },"42": {
    "doc": "DT",
    "title": "DT",
    "content": " ",
    "url": "/prefabs/DT.html",
    
    "relUrl": "/prefabs/DT.html"
  },"43": {
    "doc": "Door",
    "title": "Door",
    "content": " ",
    "url": "/prefabs/Door.html",
    
    "relUrl": "/prefabs/Door.html"
  },"44": {
    "doc": "Dye",
    "title": "Dye",
    "content": " ",
    "url": "/prefabs/Dye.html",
    
    "relUrl": "/prefabs/Dye.html"
  },"45": {
    "doc": "Dynamic",
    "title": "Dynamic",
    "content": " ",
    "url": "/prefabs/Dynamic.html",
    
    "relUrl": "/prefabs/Dynamic.html"
  },"46": {
    "doc": "Dynamics",
    "title": "Dynamics",
    "content": " ",
    "url": "/prefabs/Dynamics.html",
    
    "relUrl": "/prefabs/Dynamics.html"
  },"47": {
    "doc": "EH",
    "title": "EH",
    "content": " ",
    "url": "/prefabs/EH.html",
    
    "relUrl": "/prefabs/EH.html"
  },"48": {
    "doc": "Ease",
    "title": "Ease",
    "content": " ",
    "url": "/prefabs/Ease.html",
    
    "relUrl": "/prefabs/Ease.html"
  },"49": {
    "doc": "Elris",
    "title": "Elris",
    "content": " ",
    "url": "/prefabs/Elris.html",
    
    "relUrl": "/prefabs/Elris.html"
  },"50": {
    "doc": "Equip",
    "title": "Equip",
    "content": " ",
    "url": "/prefabs/Equip.html",
    
    "relUrl": "/prefabs/Equip.html"
  },"51": {
    "doc": "Faction",
    "title": "Faction",
    "content": " ",
    "url": "/prefabs/Faction.html",
    
    "relUrl": "/prefabs/Faction.html"
  },"52": {
    "doc": "Fake",
    "title": "Fake",
    "content": " ",
    "url": "/prefabs/Fake.html",
    
    "relUrl": "/prefabs/Fake.html"
  },"53": {
    "doc": "GM",
    "title": "GM",
    "content": " ",
    "url": "/prefabs/GM.html",
    
    "relUrl": "/prefabs/GM.html"
  },"54": {
    "doc": "Garden",
    "title": "Garden",
    "content": " ",
    "url": "/prefabs/Garden.html",
    
    "relUrl": "/prefabs/Garden.html"
  },"55": {
    "doc": "Gloom",
    "title": "Gloom",
    "content": " ",
    "url": "/prefabs/Gloom.html",
    
    "relUrl": "/prefabs/Gloom.html"
  },"56": {
    "doc": "Gravestone",
    "title": "Gravestone",
    "content": " ",
    "url": "/prefabs/Gravestone.html",
    
    "relUrl": "/prefabs/Gravestone.html"
  },"57": {
    "doc": "Graveyard",
    "title": "Graveyard",
    "content": " ",
    "url": "/prefabs/Graveyard.html",
    
    "relUrl": "/prefabs/Graveyard.html"
  },"58": {
    "doc": "Ground",
    "title": "Ground",
    "content": " ",
    "url": "/prefabs/Ground.html",
    
    "relUrl": "/prefabs/Ground.html"
  },"59": {
    "doc": "Iron",
    "title": "Iron",
    "content": " ",
    "url": "/prefabs/Iron.html",
    
    "relUrl": "/prefabs/Iron.html"
  },"60": {
    "doc": "Item",
    "title": "Item",
    "content": " ",
    "url": "/prefabs/Item.html",
    
    "relUrl": "/prefabs/Item.html"
  },"61": {
    "doc": "Journal",
    "title": "Journal",
    "content": " ",
    "url": "/prefabs/Journal.html",
    
    "relUrl": "/prefabs/Journal.html"
  },"62": {
    "doc": "Map",
    "title": "Map",
    "content": " ",
    "url": "/prefabs/Map.html",
    
    "relUrl": "/prefabs/Map.html"
  },"63": {
    "doc": "Micro",
    "title": "Micro",
    "content": " ",
    "url": "/prefabs/Micro.html",
    
    "relUrl": "/prefabs/Micro.html"
  },"64": {
    "doc": "Milo",
    "title": "Milo",
    "content": " ",
    "url": "/prefabs/Milo.html",
    
    "relUrl": "/prefabs/Milo.html"
  },"65": {
    "doc": "Manual Mod Installation",
    "title": "Manually installing Mods",
    "content": "If you’re manually installing mods, you need to install BepInEx first. Reference this page if you have not completed this step. Do remember that BepInEx will take some time to generate all of the files, so give it time on first boot up and after any game hotfixes. Dependencies . Many mods require other mods in order to run. Make sure you have all of the dependencies listed for the mod you are interested in. You will see them listed on Thunderstore on each mod’s page like so: . Inside a Mod folder . Typically, a mod folder will look something like this: . In most cases, you will only need to extract the .dll file of the mod. Make sure to check over the mod’s readme to see if there are any other installation instructions particular to that mod. ",
    "url": "/user/Mod_Install.html#manually-installing-mods",
    
    "relUrl": "/user/Mod_Install.html#manually-installing-mods"
  },"66": {
    "doc": "Manual Mod Installation",
    "title": "Destination",
    "content": "You will be copying files out to the destination game folder. For Clients . Find your game folder, it’s typically something like C:\\Program Files (x86)\\Steam\\steamapps\\common\\VRising, but you can open this folder precisely by right clicking on the game in steam &gt; manage &gt; browse game files. You will then navigate into the BepInEx folder you had installed prior. Then, go to the Plugins folder contained within. If you do not see this, BepInEx has not yet been correctly installed. It is here that you will place your mods .dll files into. Note for Client ONLY: If you are installing server mods into the client (pay attention to thunderstore tags), you will need the mod ServerLaunchFix. This typically takes several round of timing out to let it generate and copy all the files it needs. — . Windows Dedicated Server . Find your game folder. If you are hosting on your own machine, you can find it precisely by right clicking on the dedicated server version of the game in steam &gt; manage &gt; browsegamefiles. After that, follow the instructions from the Client to navigate. If you are renting a game server, it will often be in the root of your access. Linux Hosted Server . It should look much the same, with other things in the folder. ",
    "url": "/user/Mod_Install.html#destination",
    
    "relUrl": "/user/Mod_Install.html#destination"
  },"67": {
    "doc": "Manual Mod Installation",
    "title": "Start game/server after moving all files",
    "content": "Your server should start with mods installed correctly. If it does not, check your BepInEx/LogOutput.log to see what is having problems loading. You will need this if you seek technical support from the discord. ",
    "url": "/user/Mod_Install.html#start-gameserver-after-moving-all-files",
    
    "relUrl": "/user/Mod_Install.html#start-gameserver-after-moving-all-files"
  },"68": {
    "doc": "Manual Mod Installation",
    "title": "Manual Mod Installation",
    "content": " ",
    "url": "/user/Mod_Install.html",
    
    "relUrl": "/user/Mod_Install.html"
  },"69": {
    "doc": "Music",
    "title": "Music",
    "content": " ",
    "url": "/prefabs/Music.html",
    
    "relUrl": "/prefabs/Music.html"
  },"70": {
    "doc": "NPCDeadeye",
    "title": "NPCDeadeye",
    "content": " ",
    "url": "/prefabs/NPCDeadeye.html",
    
    "relUrl": "/prefabs/NPCDeadeye.html"
  },"71": {
    "doc": "Quarry",
    "title": "Quarry",
    "content": " ",
    "url": "/prefabs/Quarry.html",
    
    "relUrl": "/prefabs/Quarry.html"
  },"72": {
    "doc": "Random",
    "title": "Random",
    "content": " ",
    "url": "/prefabs/Random.html",
    
    "relUrl": "/prefabs/Random.html"
  },"73": {
    "doc": "Recipe",
    "title": "Recipe",
    "content": " ",
    "url": "/prefabs/Recipe.html",
    
    "relUrl": "/prefabs/Recipe.html"
  },"74": {
    "doc": "Remainders",
    "title": "Remainders",
    "content": " ",
    "url": "/prefabs/Remainders.html",
    
    "relUrl": "/prefabs/Remainders.html"
  },"75": {
    "doc": "Resource",
    "title": "Resource",
    "content": " ",
    "url": "/prefabs/Resource.html",
    
    "relUrl": "/prefabs/Resource.html"
  },"76": {
    "doc": "Rock",
    "title": "Rock",
    "content": " ",
    "url": "/prefabs/Rock.html",
    
    "relUrl": "/prefabs/Rock.html"
  },"77": {
    "doc": "SCT",
    "title": "SCT",
    "content": " ",
    "url": "/prefabs/SCT.html",
    
    "relUrl": "/prefabs/SCT.html"
  },"78": {
    "doc": "Servant",
    "title": "Servant",
    "content": " ",
    "url": "/prefabs/Servant.html",
    
    "relUrl": "/prefabs/Servant.html"
  },"79": {
    "doc": "Set",
    "title": "Set",
    "content": " ",
    "url": "/prefabs/Set.html",
    
    "relUrl": "/prefabs/Set.html"
  },"80": {
    "doc": "Silver",
    "title": "Silver",
    "content": " ",
    "url": "/prefabs/Silver.html",
    
    "relUrl": "/prefabs/Silver.html"
  },"81": {
    "doc": "Snapping",
    "title": "Snapping",
    "content": " ",
    "url": "/prefabs/Snapping.html",
    
    "relUrl": "/prefabs/Snapping.html"
  },"82": {
    "doc": "Snow",
    "title": "Snow",
    "content": " ",
    "url": "/prefabs/Snow.html",
    
    "relUrl": "/prefabs/Snow.html"
  },"83": {
    "doc": "Spell",
    "title": "Spell",
    "content": " ",
    "url": "/prefabs/Spell.html",
    
    "relUrl": "/prefabs/Spell.html"
  },"84": {
    "doc": "Stash",
    "title": "Stash",
    "content": " ",
    "url": "/prefabs/Stash.html",
    
    "relUrl": "/prefabs/Stash.html"
  },"85": {
    "doc": "Stat",
    "title": "Stat",
    "content": " ",
    "url": "/prefabs/Stat.html",
    
    "relUrl": "/prefabs/Stat.html"
  },"86": {
    "doc": "Station",
    "title": "Station",
    "content": " ",
    "url": "/prefabs/Station.html",
    
    "relUrl": "/prefabs/Station.html"
  },"87": {
    "doc": "Storm",
    "title": "Storm",
    "content": " ",
    "url": "/prefabs/Storm.html",
    
    "relUrl": "/prefabs/Storm.html"
  },"88": {
    "doc": "Sun",
    "title": "Sun",
    "content": " ",
    "url": "/prefabs/Sun.html",
    
    "relUrl": "/prefabs/Sun.html"
  },"89": {
    "doc": "TM",
    "title": "TM",
    "content": " ",
    "url": "/prefabs/TM.html",
    
    "relUrl": "/prefabs/TM.html"
  },"90": {
    "doc": "Tech",
    "title": "Tech",
    "content": " ",
    "url": "/prefabs/Tech.html",
    
    "relUrl": "/prefabs/Tech.html"
  },"91": {
    "doc": "Transmog",
    "title": "Transmog",
    "content": " ",
    "url": "/prefabs/Transmog.html",
    
    "relUrl": "/prefabs/Transmog.html"
  },"92": {
    "doc": "Trees",
    "title": "Trees",
    "content": " ",
    "url": "/prefabs/Trees.html",
    
    "relUrl": "/prefabs/Trees.html"
  },"93": {
    "doc": "UC",
    "title": "UC",
    "content": " ",
    "url": "/prefabs/UC.html",
    
    "relUrl": "/prefabs/UC.html"
  },"94": {
    "doc": "Unholy",
    "title": "Unholy",
    "content": " ",
    "url": "/prefabs/Unholy.html",
    
    "relUrl": "/prefabs/Unholy.html"
  },"95": {
    "doc": "Using Server Mods in-game",
    "title": "How to use Server Mods In-Game",
    "content": ". | Adding to the AdminList | Authorizing yourself as an Admin in-game | Enabling Console | Using the Console in Game | Using Native V Rising Commands (Console) | Using MOD Commands (Chatbox) | . ",
    "url": "/user/Using_Server_Mods.html#how-to-use-server-mods-in-game",
    
    "relUrl": "/user/Using_Server_Mods.html#how-to-use-server-mods-in-game"
  },"96": {
    "doc": "Using Server Mods in-game",
    "title": "Adding to the AdminList",
    "content": "The very first thing you will need to do is add yourself to the list of admins. You will need to navigate to your Server’s adminlist location. Typically, this will be found at C:\\Program Files (x86)\\Steam\\steamapps\\common\\VRisingDedicatedServer\\save-data\\Settings . Within this file you will need to add your steamID. In the Steam desktop application, select your Steam username in the top right corner of the screen. Select ‘‘Account details’’. Your Steam ID can be found below your Steam username. Add your steamID to the adminlist.txt and save it. Numbers can be added, one per line. No other characters needed. (X’s are merely to demonstrate how it looks with multiple numbers) . You can do this before launching the server, or even after. If you do it after, the game may take up to 5 minutes (or your autosave frequency) to re-read the list of admins and enable your ability to authorize. ",
    "url": "/user/Using_Server_Mods.html#adding-to-the-adminlist",
    
    "relUrl": "/user/Using_Server_Mods.html#adding-to-the-adminlist"
  },"97": {
    "doc": "Using Server Mods in-game",
    "title": "Authorizing yourself as an Admin in-game",
    "content": "Once in game you will need to auhtorize yourself as an admin. ",
    "url": "/user/Using_Server_Mods.html#authorizing-yourself-as-an-admin-in-game",
    
    "relUrl": "/user/Using_Server_Mods.html#authorizing-yourself-as-an-admin-in-game"
  },"98": {
    "doc": "Using Server Mods in-game",
    "title": "Enabling Console",
    "content": "First you will need to enable the use of the console in game. Hit Esc and in the menu, go to Options. Once here, stay under the General tab and look at the options. You should see a Console Enabled option about 8 rows down. Make sure the box is ticked as indicated. ",
    "url": "/user/Using_Server_Mods.html#enabling-console",
    
    "relUrl": "/user/Using_Server_Mods.html#enabling-console"
  },"99": {
    "doc": "Using Server Mods in-game",
    "title": "Using the Console in Game",
    "content": "Once you are back to the game, you can make the console appear by pressing the ~ button. (Usually located directly above TAB) . Once the console has dropped down, you can type in Adminauth to authorize yourself as an admin. You will need to do this every time you log in. If you are successful, you will see this message in the chatbox: . ",
    "url": "/user/Using_Server_Mods.html#using-the-console-in-game",
    
    "relUrl": "/user/Using_Server_Mods.html#using-the-console-in-game"
  },"100": {
    "doc": "Using Server Mods in-game",
    "title": "Using Native V Rising Commands (Console)",
    "content": "Much like authorizing yourself, you may enter commands in this console in order to use native V Rising commands. You can see a list of commands by typing in list. (Take care it doesn’t autocomplete to listusers) Commands in the console do not have a prefix as part of the command. (No slashes and the like) . ",
    "url": "/user/Using_Server_Mods.html#using-native-v-rising-commands-console",
    
    "relUrl": "/user/Using_Server_Mods.html#using-native-v-rising-commands-console"
  },"101": {
    "doc": "Using Server Mods in-game",
    "title": "Using MOD Commands (Chatbox)",
    "content": "Mod commands however, are not entered in the console. They must be entered in the chat. If you have VCF installed, you can check this by typing .help Most mods ustilize the . prefix before their commands, as they use VCF. If they are not using VCF it could be other symbols. You should get a response like: . ",
    "url": "/user/Using_Server_Mods.html#using-mod-commands-chatbox",
    
    "relUrl": "/user/Using_Server_Mods.html#using-mod-commands-chatbox"
  },"102": {
    "doc": "Using Server Mods in-game",
    "title": "Using Server Mods in-game",
    "content": " ",
    "url": "/user/Using_Server_Mods.html",
    
    "relUrl": "/user/Using_Server_Mods.html"
  },"103": {
    "doc": "VIB",
    "title": "VIB",
    "content": " ",
    "url": "/prefabs/VIB.html",
    
    "relUrl": "/prefabs/VIB.html"
  },"104": {
    "doc": "VM",
    "title": "VM",
    "content": " ",
    "url": "/prefabs/VM.html",
    
    "relUrl": "/prefabs/VM.html"
  },"105": {
    "doc": "Vampire",
    "title": "Vampire",
    "content": " ",
    "url": "/prefabs/Vampire.html",
    
    "relUrl": "/prefabs/Vampire.html"
  },"106": {
    "doc": "Water",
    "title": "Water",
    "content": " ",
    "url": "/prefabs/Water.html",
    
    "relUrl": "/prefabs/Water.html"
  },"107": {
    "doc": "Weapon",
    "title": "Weapon",
    "content": " ",
    "url": "/prefabs/Weapon.html",
    
    "relUrl": "/prefabs/Weapon.html"
  },"108": {
    "doc": "Wild",
    "title": "Wild",
    "content": " ",
    "url": "/prefabs/Wild.html",
    
    "relUrl": "/prefabs/Wild.html"
  },"109": {
    "doc": "ZM",
    "title": "ZM",
    "content": " ",
    "url": "/prefabs/ZM.html",
    
    "relUrl": "/prefabs/ZM.html"
  },"110": {
    "doc": "Manual BepInEx Installation",
    "title": "Manually installing BepInEx",
    "content": "If you’re manually installing mods, you need to install BepInEx, you can find it on thunderstore. This page guides you through how to unzip the contents and put them in the correct location. Inside BepInExPack_V_Rising_1.691.3.zip . You will see a folder called BepInExPack__Rising, we will be moving the contents from folder, not this folder itself: . Inside BepInExPack_VRising: . BepInEx/ dotnet/ .doorstop_version doorstop_config.ini winhttp.dll . ",
    "url": "/user/bepinex_install.html#manually-installing-bepinex",
    
    "relUrl": "/user/bepinex_install.html#manually-installing-bepinex"
  },"111": {
    "doc": "Manual BepInEx Installation",
    "title": "Destination",
    "content": "You will be copying all of these files out to the destination game folder. For Clients . Find your game folder, it’s typically something like C:\\Program Files (x86)\\Steam\\steamapps\\common\\VRising, but you can open this folder precisely by right clicking on the game in steam &gt; manage &gt; browse game files. Client correctly installed . Windows Dedicated Server . Same as above, except the folder is VRisingDedicatedServer . Linux Hosted Server corrected installed . ",
    "url": "/user/bepinex_install.html#destination",
    
    "relUrl": "/user/bepinex_install.html#destination"
  },"112": {
    "doc": "Manual BepInEx Installation",
    "title": "Start game/server after moving all files",
    "content": "This will take a few minutes while BepInEx prepares to load mods for the game. This process will happen on clean installs and game updates. You can tell if it’s in the correct place because you will have a BepInEx/LogOutput.log generated and if your running a game client you will see a console Window also open with the BepInEx output. ",
    "url": "/user/bepinex_install.html#start-gameserver-after-moving-all-files",
    
    "relUrl": "/user/bepinex_install.html#start-gameserver-after-moving-all-files"
  },"113": {
    "doc": "Manual BepInEx Installation",
    "title": "Manual BepInEx Installation",
    "content": " ",
    "url": "/user/bepinex_install.html",
    
    "relUrl": "/user/bepinex_install.html"
  },"114": {
    "doc": "Wetstone -> Bloodstone",
    "title": "Bloodstone",
    "content": "Bloodstone is a successor to Wetstone for Gloomrot and beyond. It’s available on https://www.nuget.org/packages/VRising.Bloodstone/ and https://github.com/decaprime/Bloodstone . It’s actively maintained and automated through CI/CD. Soon it will contain VampireCommandFramework and other ECS utilities to make getting started easier with a single file Bloodstone.dll dependency. ",
    "url": "/dev/bloodstone.html#bloodstone",
    
    "relUrl": "/dev/bloodstone.html#bloodstone"
  },"115": {
    "doc": "Wetstone -> Bloodstone",
    "title": "Installation",
    "content": "CLI . dotnet add package VRising.Bloodstone . or . csproj . &lt;PackageReference Include=\"VRising.Bloodstone\" Version=\"0.1.1\" /&gt; . ",
    "url": "/dev/bloodstone.html#installation",
    
    "relUrl": "/dev/bloodstone.html#installation"
  },"116": {
    "doc": "Wetstone -> Bloodstone",
    "title": "Migration from Wetstone",
    "content": "Follow installation steps and either way make sure to clear out any Wetstone references you have in your project. Namespace changes . You can safely find and replace to do this update, or do it manually: Wetstone -&gt; Bloodstone . Package Id Change . xyz.molenzwiebel.Wetstone -&gt; gg.deca.Bloodstone . ",
    "url": "/dev/bloodstone.html#migration-from-wetstone",
    
    "relUrl": "/dev/bloodstone.html#migration-from-wetstone"
  },"117": {
    "doc": "Wetstone -> Bloodstone",
    "title": "Wetstone -> Bloodstone",
    "content": ". ",
    "url": "/dev/bloodstone.html",
    
    "relUrl": "/dev/bloodstone.html"
  },"118": {
    "doc": "How to rollback client",
    "title": "How to rollback the V Rising client to a previous version",
    "content": "To roll back to the previous version, before 1.0, this is what you need to do: . | In your steam library right click on V Rising and select Properties | Go to the Betas tab | In the beta selection dropdown choose the version you desire. | For Initial release, choose: 0.5.43954_hotfix13 - Client version 0.5.43954. | For Gloomrot, choose: 0.6.5.57575_hotfix6 - Client version: 0.6.5.57575 | . | . ",
    "url": "/user/client_rollback.html#how-to-rollback-the-v-rising-client-to-a-previous-version",
    
    "relUrl": "/user/client_rollback.html#how-to-rollback-the-v-rising-client-to-a-previous-version"
  },"119": {
    "doc": "How to rollback client",
    "title": "Mods for Prior Versions",
    "content": "You will need to browse Thunderstore for mods that were compatible with those versions. To see if a mod has a compatible version, check its Versions tab at the top, and look for approprite dates for the prior versions. Some mods may still have the gloomrot update tag, and others may not. | For initial release, no versions beyond May 16th 2023 | For Gloomrot, after the above date and no versions beyond May 7th 2024 | . ",
    "url": "/user/client_rollback.html#mods-for-prior-versions",
    
    "relUrl": "/user/client_rollback.html#mods-for-prior-versions"
  },"120": {
    "doc": "How to rollback client",
    "title": "How to rollback client",
    "content": " ",
    "url": "/user/client_rollback.html",
    
    "relUrl": "/user/client_rollback.html"
  },"121": {
    "doc": "Wiki Editing 🤔",
    "title": "How to create and edit files",
    "content": "This wiki is built with markdown and hosted on GitHub. All pages have an Edit this page on GitHub link at the bottom. You make your changes in markdown and then submit them to be merged into the website. For new files click the Add new page link in the sidebar, . | Update the FILE_NAME and path above the editor, you can backspace to change directory if appropriate | Set the title and parent at top of this doc, this metadata controls the side navigation | You can find more info: https://just-the-docs.github.io/just-the-docs/docs/navigation-structure/ | After you’re done, scroll down and please start a pull request 😊 | . If you see something that can be contributed, please don’t let worry about format or correctness stop you, know there’s a review process and everything can be undone. If you’ve never used GitHub before, this is a good chance to acclimate. ",
    "url": "/editing.html#how-to-create-and-edit-files",
    
    "relUrl": "/editing.html#how-to-create-and-edit-files"
  },"122": {
    "doc": "Wiki Editing 🤔",
    "title": "Including Screenshots",
    "content": "You can just paste images while inside the GitHub markdown editor and it will upload them and create the markup. These images work on the deployed wiki. Please only use images cropped to the subject area (e.g. Windows: alt+print screen - capture window, Win+Shift+s - Snipping Tool). ",
    "url": "/editing.html#including-screenshots",
    
    "relUrl": "/editing.html#including-screenshots"
  },"123": {
    "doc": "Wiki Editing 🤔",
    "title": "Wiki Editing 🤔",
    "content": " ",
    "url": "/editing.html",
    
    "relUrl": "/editing.html"
  },"124": {
    "doc": "Tutorials",
    "title": "Tutorials",
    "content": "The following tutorials are community made. There is no one right way to create mods or software in general. You should use these tutorials as examples of how to get started but not strict guidelines or standards of the community for contributing to the modding the game or open source. ",
    "url": "/dev/tutorials/",
    
    "relUrl": "/dev/tutorials/"
  },"125": {
    "doc": "For Developers",
    "title": "Template",
    "content": "We have a mod template to make getting started simple as dotnet new vrisngmod. You can reference open source and resources for more information for now. ",
    "url": "/dev/#template",
    
    "relUrl": "/dev/#template"
  },"126": {
    "doc": "For Developers",
    "title": "For Developers",
    "content": " ",
    "url": "/dev/",
    
    "relUrl": "/dev/"
  },"127": {
    "doc": "Prefabs",
    "title": "Prefabs",
    "content": "Prefabs are identifers often used in commands or configurations to refer to an object, item, effect, etc. Full list here (warning large file): all prefabs also the remainder of the prefabs with fewer than 10 in a category into remainders prefabs. AB (6799) AI (116) Ability (13) Aim (37) BEH (320) BP (140) Base (44) Biome (11) Blood (32) Braziers (11) Buff (478) CHAR (482) CO (275) Castle (27) Chain (1306) Copper (10) Creature (82) Critter (27) Cursed (24) Curtains (11) Curve (15) DG (354) DT (477) Door (11) Dye (49) Dynamic (438) Dynamics (101) EH (28) Ease (17) Elris (21) Equip (56) Faction (32) Fake (21) GM (32) Garden (34) Gloom (42) Gravestone (12) Graveyard (38) Ground (929) Iron (10) Item (1095) Journal (158) Map (157) Micro (87) Milo (21) Music (22) NPCDeadeye (10) Quarry (21) Random (50) Recipe (599) Remainders (635) Resource (138) Rock (11) SCT (39) Servant (70) Set (86) Silver (27) Snapping (38) Snow (21) Spell (288) Stash (17) Stat (39) Station (21) Storm (12) Sun (12) TM (5928) Tech (323) Transmog (32) Trees (349) UC (330) Unholy (13) VIB (96) VM (291) Vampire (125) Water (108) Weapon (43) Wild (21) ZM (10) ",
    "url": "/prefabs/",
    
    "relUrl": "/prefabs/"
  },"128": {
    "doc": "For Users",
    "title": "For users of mods",
    "content": ". | V Rising mods at Thunderstore: https://v-rising.thunderstore.io/ | Discord: V Rising Mod Community Discord | Support: Check out support channels in the discord or in the mod’s readme | . ",
    "url": "/user/#for-users-of-mods",
    
    "relUrl": "/user/#for-users-of-mods"
  },"129": {
    "doc": "For Users",
    "title": "Installation",
    "content": ". | Manual BepInEx Installation | Manual Mod Installation | Using Server Mods in-game | . If you wish to play an earlier version of V Rising: Client Rollback . ",
    "url": "/user/#installation",
    
    "relUrl": "/user/#installation"
  },"130": {
    "doc": "For Users",
    "title": "For Users",
    "content": " ",
    "url": "/user/",
    
    "relUrl": "/user/"
  },"131": {
    "doc": "V Rising Mod Wiki",
    "title": "🧛‍♂️ V Rising Mod Wiki",
    "content": "This is a wiki for V Rising mod developers and users. You can add or edit any of these pages on github. You might want to get started by learning how to build a V Rising mod . Join Discord . ",
    "url": "/#%EF%B8%8F-v-rising-mod-wiki",
    
    "relUrl": "/#️-v-rising-mod-wiki"
  },"132": {
    "doc": "V Rising Mod Wiki",
    "title": "V Rising Mod Wiki",
    "content": "1.0 Compatability . BepInEx and Mods now available on Thunderstore here. Check discord for latest information. ",
    "url": "/",
    
    "relUrl": "/"
  },"133": {
    "doc": "Migration Guide for 1.0 Update",
    "title": "Migrating plugins for 1.0",
    "content": ". | BepInEx: Thunderstore 1.691.3 | Game Libs: nuget | . This version of game libs privately packages the interop changes from above with the already interop’d client assemblies. This avoids the need for the MSBuild task creating the interop and is intended to get developers rolling on release date. ",
    "url": "/dev/migration_guide.html#migrating-plugins-for-10",
    
    "relUrl": "/dev/migration_guide.html#migrating-plugins-for-10"
  },"134": {
    "doc": "Migration Guide for 1.0 Update",
    "title": ".csproj changes",
    "content": "&lt;PackageReference Include=\"BepInEx.Unity.IL2CPP\" Version=\"6.0.0-be.691\" IncludeAssets=\"compile\" /&gt; &lt;PackageReference Include=\"BepInEx.Core\" Version=\"6.0.0-be.691\" IncludeAssets=\"compile\" /&gt; &lt;PackageReference Include=\"VRising.Unhollowed.Client\" Version=\"1.0.*\" /&gt; . ",
    "url": "/dev/migration_guide.html#csproj-changes",
    
    "relUrl": "/dev/migration_guide.html#csproj-changes"
  },"135": {
    "doc": "Migration Guide for 1.0 Update",
    "title": "Using Changes",
    "content": "PrefabGUID calls need using Stunlock.Core; . ",
    "url": "/dev/migration_guide.html#using-changes",
    
    "relUrl": "/dev/migration_guide.html#using-changes"
  },"136": {
    "doc": "Migration Guide for 1.0 Update",
    "title": "Namespace Changes (can find replace)",
    "content": ". | FixedString64 -&gt; FixedString64Bytes | GetExistingSystem -&gt; GetExistingSystemManaged | . ",
    "url": "/dev/migration_guide.html#namespace-changes-can-find-replace",
    
    "relUrl": "/dev/migration_guide.html#namespace-changes-can-find-replace"
  },"137": {
    "doc": "Migration Guide for 1.0 Update",
    "title": "Migration Guide for 1.0 Update",
    "content": " ",
    "url": "/dev/migration_guide.html",
    
    "relUrl": "/dev/migration_guide.html"
  },"138": {
    "doc": "Open Source Mods",
    "title": "Server Mods",
    "content": "| Mod Name | Description | Author | . | CrimsonDice | Dice Chat Roller &amp; Minigames | skytech6 | . | CrimsonClans | Extension to Clans: Hearts per Clan and more! | skytech6 | . | KindredCommands | Commands to expand Administration efforts and provide information | odjit | . | CrimsonChatFilter | Automated Moderation for Server Chat | skytech6 | . | CrimsonBanned | Ban Moderation Tool: Chat, Voice, Server | skytech6 | . | CrimsonFAQ | AutoResponse System | skytech6 | . | CrimsonDropRate | Modifies the item group drop rate, not the item quantity drop | skytech6 | . | AutoBrazier | Automatically turn braziers on/off with day/night cycle | skytech6 | . | CrimsonMoon | A sacraficial alter to praise the moon! Honor it in return for a blood moon! | skytech6 | . | XPRising | Server mod that exchanges item gear level for an XP levelling system | XPRising | . | CrimsonLog | Logging for Moderation | skytech6 | . | Bloodcraft | Leveling, expertise, legacies, professions, familiars, classes, quests! | zfolmt | . | KindredLogistics | Inventory management mod. Stashing, craftpulling, finding chests, etc. | Kindred | . | KindredSchematics | Commands to build, create, save and load schematics | odjit | . | OfflineRaidGuard | Stops offline raiding, scopes to either clan or player requirements | skytech6 | . | Gator_Bounty | Bounty System for VRising | Gator | . | KindredPortals | Expand your V Rising fast travel options. Also Map Icons | odjit | . | BloodyBoss | BloodyBoss is a mod for V Rising that allows you to create VBlood world bosses with random rewards that can be set for each of the world bosses. | Trodi | . | CrimsonQuest | Questing System | skytech6 | . | Sanguis | Reward players for being online with optional daily login bonus! | zfolmt | . | BloodyEncounters | A server side mod for V Rising which spawns a random NPC near a random online player at random intervals, and the player wins a random item reward if the NPC is killed within the given time limit. | Trodi | . | BloodyWallet | This framework is designed to add a virtual currency to VRising. This opens up a world of possibilities for other mods to integrate with it and serve as a bridge for other mods to use this functionality. | Trodi | . | CrimsonHunt | Create battle-pass like rewards for V Blood hunting | skytech6 | . | Protector | Whitelist based access control for V Rising | GoDMod | . | RaidGuard | Highly discourages teaming during active castle raids with optional alliance features. | zfolmt | . | BloodyRewards | Rewards System for VRising. | Trodi | . | JewelCreator | Server side only mod that allows you to create your own jewels with your chosen skill and skill modifier. | Rianaid | . | ShardExtraLife | Server side only mod to change shards params like is: durability, time to break, destroy when broken and drop amount. | Rianaid | . | CoffinSleep | A VRising mod that speeds up time while you sleep in your coffin. | Caioreix | . | BloodyShop | Mod to create a store in VRising. | Trodi | . | BloodyMailBox | The BloodyMailBox mod for VRising allows users to receive messages and receive notifications of new messages even when they are offline. | Trodi | . | BloodyPoint | Mod so that personal or global waypoints can be created. | Trodi | . | BloodyMerchant | BloodyMerchant is a mod designed for V Rising, offering the capability to create custom in-game merchants, adding a layer of dynamic and immersive gameplay. | Trodi | . | Notify | A mod that notifies when a user connects or disconnects from the server, new user connect from the server, when a player kills a VBlood boss, Message of the day system and auto announce system that runs every certain interval. | Trodi | . | AutoCloseDoors | Mod to automatically close doors after a few seconds. | Midon | . | StarterKit | Server side only mod that allows you to issue different starter kits to new vampires. | Rianaid | . | KindredArenas | Sets PvP protection buff in designated zones. | odjit | . | MuteChatPlayer | Server side only mod which allows server admins to prohibit a specific player from sending messages to the chat. | Rianaid | . | BetterMissions | An VRising mod to do a better control of the servant missions. | Caioreix | . | BloodRefill | A server-side only mod that allows players to refill their blood pool in different ways. | Skies | . | SpiderKiller | Mod that kills spiders in a range around you and your friends. So you don't have to fight those pesky things! | Skies | . ",
    "url": "/dev/open%20source.html",
    
    "relUrl": "/dev/open%20source.html"
  },"139": {
    "doc": "Open Source Mods",
    "title": "Client Mods",
    "content": "| Mod Name | Description | Author | . | ClientUI | ClientUI to display progress bars for XP mods | XPRising | . | Eclipse | Client companion mod for Bloodcraft! | zfolmt | . | CrimsonFOV | Modifies the client camera field of view | skytech6 | . | RemoveVersionWatermark | Removes version watermark | NodusCursorius | . ",
    "url": "/dev/open%20source.html",
    
    "relUrl": "/dev/open%20source.html"
  },"140": {
    "doc": "Open Source Mods",
    "title": "Frameworks",
    "content": "| Mod Name | Description | Author | . | CrimsonSQL | Framework for Interfacing MySQL | skytech6 | . | XPShared | Mod to enable communication between XPRising and XPRising.ClientUI | XPRising | . | BloodyCore | Bloody.Core a help library for mod development. It must be installed if any mod uses it. | Trodi | . | Bloodstone | Plugin framework and general utilities for V Rising mods. | deca | . | VampireCommandFramework | Command framework for developers to easily create universal commands for their plugins. | deca | . ",
    "url": "/dev/open%20source.html",
    
    "relUrl": "/dev/open%20source.html"
  },"141": {
    "doc": "Open Source Mods",
    "title": "Open Source Mods",
    "content": " ",
    "url": "/dev/open%20source.html",
    
    "relUrl": "/dev/open%20source.html"
  },"142": {
    "doc": "Resources",
    "title": "Resources for Mod Developers",
    "content": " ",
    "url": "/dev/resources.html#resources-for-mod-developers",
    
    "relUrl": "/dev/resources.html#resources-for-mod-developers"
  },"143": {
    "doc": "Resources",
    "title": "Unity Explorer",
    "content": "Unity Explorer is a tool that allows you to dig into the internal structure of the game while it’s running. Thunderstore Version . UnityExplorer IL2CPP at Thunderstore . Building from source . Unity Explorer can be built from source and installed manually: . Prerequisites . | Install BepInEx in VRising | Install the .NET 6 SDK via manual download or winget (winget install Microsoft.DotNet.SDK.6) | . Build Instructions . | Clone https://github.com/kremnev8/UnityExplorer | In a terminal in the UnityExplorer directory, run dotnet build -c BIE_Cpp_CoreCLR .\\src\\UnityExplorer.csproj. This will build the plugin. | Copy all of the files in the Release\\Release\\UnityExplorer.BepInEx.IL2CPP.CoreCLR subdirectory to the BepInEx plugin directory at &lt;steamapps&gt;\\common\\VRising\\BepInEx\\plugins. | The next time you run the game with BepInEx, the Unity Explorer UI will be overlayed in the game. See https://github.com/kremnev8/UnityExplorer for more information about how to use it. | . ",
    "url": "/dev/resources.html#unity-explorer",
    
    "relUrl": "/dev/resources.html#unity-explorer"
  },"144": {
    "doc": "Resources",
    "title": "Debugging with using Visual Studio (untested)",
    "content": ". | Install Visual Studio Tools for Unity using Visual Studio Installer. You can find the component behind Individual components tab. | Edit doorstop_config.ini (either in VRising or VRising_Server folder, depending on what you are modding) and change debugEnabled to true. | Launch the game (or server) with the plugin. | In Visual Studio goto Debug / Attach Unity Debugger, click to Input IP, enter 127.0.0.1:10000 | . ",
    "url": "/dev/resources.html#debugging-with-using-visual-studio-untested",
    
    "relUrl": "/dev/resources.html#debugging-with-using-visual-studio-untested"
  },"145": {
    "doc": "Resources",
    "title": "Cpp2IL Decompiled Method Dumps",
    "content": "Download Cpp2IL-2022.0.5-Windows.exe into an empty folder, then open a command prompt / powershell / etc. in that folder and run this command: . Cpp2IL-2022.0.5-Windows.exe --analysis-level=4 --game-path=\"{PATH\\TO\\YOUR\\GAME\\FOLDER}\" --exe-name=\"Vrising\" --analyze-all --parallel (change {PATH\\TO\\YOUR\\GAME\\FOLDER} to the full path of your game folder). ",
    "url": "/dev/resources.html#cpp2il-decompiled-method-dumps",
    
    "relUrl": "/dev/resources.html#cpp2il-decompiled-method-dumps"
  },"146": {
    "doc": "Resources",
    "title": "Resources",
    "content": " ",
    "url": "/dev/resources.html",
    
    "relUrl": "/dev/resources.html"
  },"147": {
    "doc": "dotnet new vrisingmod",
    "title": "Template",
    "content": "We have a mod template to make getting started easy . Installation . dotnet new --install VRising.ModTemplate . Example usage . dotnet new vrisingmod -n NameOfYourMod --use-vcf --use-bloodstone --description \"Description of your mod\" . This will get you started with a mod named NameOfYourMod, using Bloodstone and VampireCommandFramework that has a sample server command to uncomment. ",
    "url": "/dev/template.html#template",
    
    "relUrl": "/dev/template.html#template"
  },"148": {
    "doc": "dotnet new vrisingmod",
    "title": "Template Plus",
    "content": "Alternatively, there is also an extended (and opinionated) template available. Installation . dotnet new --install VRising.ModTemplatePlus . Example usage . dotnet new vrisingmodplus -n NameOfYourMod -how -desc \"Description of your mod\" . -how A simple example mod pre-built and ready to build with how-to tips on how to get started making mods -desc A description of your mod. -bloodstone Include Bloodstone framework -bloodycore Include Bloody.Core framework -vamp Include VAMP framework . Plus always includes VampireCommandFramework . Why Plus? . Plus is created by CrimsonMods, and is opinionated about how to structure mods and what should be included in every V Rising modding project. As such, this template was created as a quicker setup for those that always use X framework or always include Core, Settings, ECSExtensions patterns. And as an added bonus, it was created to include a simple example mod that can be used as a starting point for those that want to get started with modding. ",
    "url": "/dev/template.html#template-plus",
    
    "relUrl": "/dev/template.html#template-plus"
  },"149": {
    "doc": "dotnet new vrisingmod",
    "title": "dotnet new vrisingmod",
    "content": " ",
    "url": "/dev/template.html",
    
    "relUrl": "/dev/template.html"
  },"150": {
    "doc": "Uploading To Thunderstore",
    "title": "How to Upload Mods to Thunderstore for V Rising",
    "content": "Uploading your mod to Thunderstore is a simple process, but it requires a few steps to ensure your mod is correctly packaged and ready for the community to enjoy. Before uploading your mod to Thunderstore, ensure you have the following: . | A Thunderstore account | A mod created and tested for V Rising. | A .zip file package with your mod. It must contain an icon image, a readme, and a manifest. A changelog is also strongly recommended. | . ",
    "url": "/dev/upload_to_thunderstore.html#how-to-upload-mods-to-thunderstore-for-v-rising",
    
    "relUrl": "/dev/upload_to_thunderstore.html#how-to-upload-mods-to-thunderstore-for-v-rising"
  },"151": {
    "doc": "Uploading To Thunderstore",
    "title": "Login to Thunderstore",
    "content": "Thunderstore doesn’t register an account from just an email. You will need either a Discord account, a Github account, or an Overwolf account. Once you authorize a connection to Thunderstore, you will be logged in with an account that shares the same name of the linked account. ",
    "url": "/dev/upload_to_thunderstore.html#login-to-thunderstore",
    
    "relUrl": "/dev/upload_to_thunderstore.html#login-to-thunderstore"
  },"152": {
    "doc": "Uploading To Thunderstore",
    "title": "Pick a Team name",
    "content": "You can decide what name you upload your mods under via a Team. Team functionality allows you to add other people to update mods associated with the team. Do keep in mind that you cannot alter a team name on a modpage. You can also hand over mods via changing a team’s owner. You cannot disband (delete) a team that has any packages attached. You may also add a donation link to all mods under the team’s name. ",
    "url": "/dev/upload_to_thunderstore.html#pick-a-team-name",
    
    "relUrl": "/dev/upload_to_thunderstore.html#pick-a-team-name"
  },"153": {
    "doc": "Uploading To Thunderstore",
    "title": "Preparing your mod package/zip",
    "content": "You will need to make a proper package for your mod. Please remember you cannot edit an upload, so check over everything carefully. You would need to release an update to edit any files contained within the zip. Thunderstore Upload Resources: Documentation | Manifest Validator | Readme Preview . Package Format Requirements . | A valid package is a zip file that contains the following files: . | your mod’s .dll | icon.png PNG icon for the mod, must be 256x256 resolution. | README.md Readme in markdown syntax to be rendered on the package’s page. | CHANGELOG.md (optional) Changelog in markdown syntax to be rendered on the package’s page. | manifest.json JSON file with the package’s metadata. Manifest . This contains all the relevant information for your mod. It will determine the details of your mod on it’s page. It is also how you update your mod. | . | . Changelog . While a changelog is not required to upload a mod, it is good practice to have to alert users of what changes, fixes, updates etc are present in the new version. Again, everything is in markdown and you can use the readme previewer to check your changelog as well. ",
    "url": "/dev/upload_to_thunderstore.html#preparing-your-mod-packagezip",
    
    "relUrl": "/dev/upload_to_thunderstore.html#preparing-your-mod-packagezip"
  },"154": {
    "doc": "Uploading To Thunderstore",
    "title": "Upload Your Mod",
    "content": ". | Navigate to the Upload page | Under the “Submit Package” section, click “Choose or drag file here” to select your .zip file (the mod you created). | Use the Team dropdown to select your team that you wish to link the mod to. | Use the Communities dropdown to select V Rising. | Once the community is chosen, you can use the Categories dropdown to choose the appropriate tags for your mod. | Hit Submit and wait for the upload to complete. The process might take a few seconds to a minute, depending on the file size. | . IF your package is rejected . | Check your manifest over and make sure you have it and other files correctly formatted. | Use the tools like maifest validator and readme preview to check it over. | If you have further issues, seek help on the Thunderstore discord. | . ",
    "url": "/dev/upload_to_thunderstore.html#upload-your-mod",
    
    "relUrl": "/dev/upload_to_thunderstore.html#upload-your-mod"
  },"155": {
    "doc": "Uploading To Thunderstore",
    "title": "Updating your Mod",
    "content": "To update your mod, you will need to essentially update the zip file and reupload. Make sure to advance the version number in the manifest in order for it to accept a new version. If you wish to update anything in the zip, the mod, README, CHANGELOG, or MANIFEST, you must upload a new version. Basic update syntax: Major.Minor.Patch Bugfixes are a patch, a few new commands are minor, and big overhauls/major feature introductions or compatability updates are major. ",
    "url": "/dev/upload_to_thunderstore.html#updating-your-mod",
    
    "relUrl": "/dev/upload_to_thunderstore.html#updating-your-mod"
  },"156": {
    "doc": "Uploading To Thunderstore",
    "title": "Uploading To Thunderstore",
    "content": " ",
    "url": "/dev/upload_to_thunderstore.html",
    
    "relUrl": "/dev/upload_to_thunderstore.html"
  }
}
